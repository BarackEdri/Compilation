/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import java.io.*;

parser code 
{:
	public Lexer lexer;
	public String file;

	public Parser(Lexer lexer, String file)
	{
		super(lexer);
		this.lexer = lexer;
		this.file = file;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF, WHILE, NEW, NIL;
terminal EQ, GT, LT;
terminal DOT, SEMICOLON, COMMA;
terminal PLUS, MINUS, TIMES, DIVIDE;
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
terminal ASSIGN, EXTENDS, ERROR;
terminal ARRAY, RETURN, CLASS, STRING;
terminal TYPE_VOID, TYPE_STRING, TYPE_INT;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROGRAM     Program;
non terminal AST_ARG_ARRAY   arrayTypedef;
non terminal AST_ARG_LIST    argList;
non terminal AST_ARG_BINOP   BINOP;
non terminal AST_ARG 		 arg;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_CFIELD      cField;
non terminal AST_DEC_CLASS1  classDec;
non terminal AST_DEC_FUNC2   funcDec;
non terminal AST_DEC_LIST    decList;
non terminal AST_DEC 		 dec;
non terminal AST_EXP_BINOP   expBinop;
non terminal AST_EXP_LIST2   expList;
non terminal AST_EXP_NEW2    newExp;
non terminal AST_EXP         exp;
non terminal AST_STMT_LIST   stmtList;
non terminal AST_STMT        stmt;
non terminal AST_TYPE        type;
non terminal AST_VAR_DEC 	 varDec;
non terminal AST_VAR 		 var;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ, LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc LBRACK, LPAREN;
precedence left DOT;

/************************/
/* START WITH: Program */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/
Program	::= decList:dList {: RESULT= new AST_PROGRAM(dList,parser.file); :};

dec ::= varDec:v 	   {: RESULT = new AST_DEC_VAR(v);    :}
	  | funcDec:f 	   {: RESULT = new AST_DEC_FUNC1(f);  :}
	  | classDec:c 	   {: RESULT = new AST_DEC_CLASS2(c); :}
	  | arrayTypedef:a {: RESULT = new AST_DEC_ARRAY(a);  :};

decList	::=	dec:d decList:dList	{: RESULT = new AST_DEC_LIST(d,dList); :}
		  | dec:d				{: RESULT = new AST_DEC_LIST(d,null);  :};

cField 	::= varDec:v  {: RESULT = new AST_CFIELD_VAR(v);  :}
		  | funcDec:f {: RESULT = new AST_CFIELD_FUNC(f); :};

cFieldList ::= cField:c cFieldList:cList {: RESULT = new AST_CFIELD_LIST(c,cList); :}
			 | cField:c  				 {: RESULT = new AST_CFIELD_LIST(c,null);  :};

arg ::= type:t ID:id {: RESULT = new AST_ARG(t,id); :};

argList ::= arg:a				      {: RESULT = new AST_ARG_LIST(a,null);  :}
		  | arg:a COMMA argList:aList {: RESULT = new AST_ARG_LIST(a,aList); :};

exp	::=	var:v									 	  {: RESULT = new AST_EXP_VAR(v);          			      :}
	  | LPAREN exp:e RPAREN							  {: RESULT = new AST_EXP_SIMPLE(e);        			  :}
	  | BINOP:b				 						  {: RESULT = new AST_EXP_BINOP(b); 			          :}
	  | var:v DOT ID:name LPAREN expList:eList RPAREN {: RESULT = new AST_EXP_DOT_LIST(v,name,eList,vleft+1); :}
	  | var:v DOT ID:name LPAREN RPAREN	 			  {: RESULT = new AST_EXP_DOT(v,name,vleft+1);   		  :}
	  | ID:name LPAREN expList:eList RPAREN	 		  {: RESULT = new AST_EXP_LIST1(name,eList,nameleft+1);   :}
	  | ID:name LPAREN RPAREN	 		 			  {: RESULT = new AST_EXP_ID(name,nameleft+1);  		  :}
	  | INT:i 									      {: RESULT = new AST_EXP_INT(i);   			   	      :}
	  | MINUS INT:i 								  {: RESULT = new AST_EXP_INT_MINUS(i);   			   	  :}
	  | NIL 										  {: RESULT = new AST_EXP_NIL();   		   			      :}
	  | STRING:s									  {: RESULT = new AST_EXP_STRING(s);   				      :};	

expList ::= exp:e1 COMMA expList:eList {: RESULT = new AST_EXP_LIST2(e1,eList,e1left+1); :} 
	      | exp:e1     		  		   {: RESULT = new AST_EXP_LIST2(e1,null,e1left+1);  :};

stmt ::= var:v ASSIGN exp:e SEMICOLON							  {: RESULT = new AST_STMT_ASSIGN(v,e,vleft+1);		       :}
	   | varDec:vd												  {: RESULT = new AST_STMT_VAR(vd); 		               :}
	   | var:v ASSIGN newExp:ne SEMICOLON						  {: RESULT = new AST_STMT_EXP_NEW(v,ne,vleft+1);  	       :}
	   | RETURN exp:e SEMICOLON									  {: RESULT = new AST_STMT_EXP(e,eleft+1);  			   :}
	   | RETURN:r SEMICOLON										  {: RESULT = new AST_STMT_RETURN(rleft+1); 			   :}
	   | IF LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	  {: RESULT = new AST_STMT_IF(cond,body,condleft+1); 	   :}
	   | WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_STMT_WHILE(cond,body,condleft+1);    :}
	   | var:v DOT ID:name LPAREN expList:el RPAREN SEMICOLON	  {: RESULT = new AST_STMT_DOT_LIST(v,name,el,nameleft+1); :}
	   | var:v DOT ID:name LPAREN RPAREN SEMICOLON				  {: RESULT = new AST_STMT_DOT(v,name,nameleft+1);         :}
	   | ID:name LPAREN expList:el RPAREN SEMICOLON				  {: RESULT = new AST_STMT_EXP_LIST(name,el,nameleft+1);   :}
	   | ID:name LPAREN RPAREN SEMICOLON						  {: RESULT = new AST_STMT_ID(name,nameleft+1);            :};

stmtList ::= stmt:s	stmtList:sList {: RESULT = new AST_STMT_LIST(s,sList); :}
		   | stmt:s				   {: RESULT = new AST_STMT_LIST(s,null);  :};

type ::= TYPE_INT:t    {: RESULT = new AST_TYPE_INT(tleft+1);    :}
	   | TYPE_STRING:s {: RESULT = new AST_TYPE_STRING(sleft+1); :}
	   | TYPE_VOID:v   {: RESULT = new AST_TYPE_VOID(vleft+1);   :}
	   | ID:id		   {: RESULT = new AST_TYPE_ID(id,idleft+1); :};

arrayTypedef ::= ARRAY ID:id EQ type:t LBRACK RBRACK SEMICOLON {: RESULT= new AST_ARG_ARRAY(id,t,idleft+1); :};

varDec ::= type:t ID:id SEMICOLON					{: RESULT = new AST_VAR_DEC_SIMPLE(t,id,tleft+1);     :}
		 | type:t ID:id ASSIGN exp:e SEMICOLON		{: RESULT = new AST_VAR_DEC_EXP(t,id,e,tleft+1);      :}
	     | type:t ID:id ASSIGN newExp:ne SEMICOLON	{: RESULT = new AST_VAR_DEC_EXP_NEW(t,id,ne,tleft+1); :};

funcDec	::= type:t ID:id LPAREN RPAREN LBRACE stmtList:sList RBRACE 			  {: RESULT = new AST_DEC_FUNC2(t,id,null,sList,tleft+1);  :}
		  | type:t ID:id LPAREN argList:aList RPAREN LBRACE stmtList:sList RBRACE {: RESULT = new AST_DEC_FUNC2(t,id,aList,sList,tleft+1); :};

classDec ::= CLASS ID:id LBRACE cFieldList:cList RBRACE 		        {: RESULT = new AST_DEC_SIMPLE(id,cList,idleft+1);        :}
		   | CLASS ID:id1 EXTENDS ID:id2 LBRACE cFieldList:cList RBRACE {: RESULT = new AST_DEC_EXTENDS(id1,id2,cList,id1left+1); :}; 

var	::=	ID:name					  {: RESULT = new AST_VAR_SIMPLE(name,nameleft+1);    :}
	  | var:v DOT ID:fieldName	  {: RESULT = new AST_VAR_FIELD(v,fieldName,vleft+1); :} 
	  | var:v LBRACK exp:e RBRACK {: RESULT = new AST_VAR_SUBSCRIPT(v,e,vleft+1);     :};

newExp ::= NEW type:t 					  {: RESULT = new AST_EXP_TYPE(t,tleft+1);   :}
		 | NEW type:t LBRACK exp:e RBRACK {: RESULT = new AST_EXP_NEW1(t,e,tleft+1); :};

BINOP ::= exp:e1 PLUS exp:e2 	{: RESULT = new AST_ARG_BINOP(0,e1,e2,e1left+1); :}	
		| exp:e1 MINUS exp:e2	{: RESULT = new AST_ARG_BINOP(1,e1,e2,e1left+1); :}
		| exp:e1 TIMES exp:e2 	{: RESULT = new AST_ARG_BINOP(2,e1,e2,e1left+1); :}
		| exp:e1 DIVIDE exp:e2	{: RESULT = new AST_ARG_BINOP(3,e1,e2,e1left+1); :}
		| exp:e1 GT exp:e2		{: RESULT = new AST_ARG_BINOP(4,e1,e2,e1left+1); :}
		| exp:e1 LT exp:e2		{: RESULT = new AST_ARG_BINOP(5,e1,e2,e1left+1); :}
		| exp:e1 EQ exp:e2		{: RESULT = new AST_ARG_BINOP(6,e1,e2,e1left+1); :};
