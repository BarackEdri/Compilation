
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.PrintWriter;
import java_cup.runtime.*;
import AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TokenNames.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\004\000\002\004\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\011\000\002\007\005\000\002\007" +
    "\007\000\002\007\007\000\002\010\011\000\002\010\012" +
    "\000\002\023\006\000\002\023\004\000\002\011\007\000" +
    "\002\011\011\000\002\021\004\000\002\021\003\000\002" +
    "\012\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\007\000\002\012\006\000\002\012\010\000\002" +
    "\012\003\000\002\012\004\000\002\012\003\000\002\012" +
    "\003\000\002\013\003\000\002\013\005\000\002\014\003" +
    "\000\002\014\005\000\002\014\006\000\002\015\003\000" +
    "\002\015\006\000\002\015\006\000\002\015\005\000\002" +
    "\015\004\000\002\015\011\000\002\015\011\000\002\015" +
    "\006\000\002\015\007\000\002\015\010\000\002\015\011" +
    "\000\002\016\004\000\002\016\003\000\002\017\007\000" +
    "\002\017\004\000\002\020\003\000\002\020\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\016\026\004\027\020\030\014\031\006\032" +
    "\017\043\012\001\002\000\010\012\ufff8\020\ufff8\043\ufff8" +
    "\001\002\000\020\002\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\043\ufffb\001\002\000\004\043\217\001\002" +
    "\000\020\002\uffff\026\004\027\020\030\014\031\006\032" +
    "\017\043\012\001\002\000\020\002\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\043\ufffc\001\002\000\004\002" +
    "\215\001\002\000\010\012\ufff5\020\ufff5\043\ufff5\001\002" +
    "\000\004\043\037\001\002\000\010\012\ufff7\020\ufff7\043" +
    "\ufff7\001\002\000\020\002\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\043\ufff9\001\002\000\020\002\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\043\ufffa\001\002" +
    "\000\004\043\021\001\002\000\010\012\ufff6\020\ufff6\043" +
    "\ufff6\001\002\000\006\014\uffba\033\uffba\001\002\000\006" +
    "\014\023\033\024\001\002\000\012\026\004\027\020\030" +
    "\014\043\012\001\002\000\004\043\025\001\002\000\004" +
    "\014\026\001\002\000\012\026\004\027\020\030\014\043" +
    "\012\001\002\000\014\015\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\043\uffc2\001\002\000\004\015\034\001\002\000\014\015" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\043\uffc3\001\002\000\014" +
    "\015\uffe9\026\004\027\020\030\014\043\012\001\002\000" +
    "\004\015\uffea\001\002\000\020\002\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\043\uffeb\001\002\000\004\015" +
    "\036\001\002\000\020\002\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\043\uffec\001\002\000\010\010\041\020" +
    "\040\021\042\001\002\000\030\002\ufff3\015\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\043\ufff3\001\002\000\014\011\124\026\004\027\020" +
    "\030\014\043\012\001\002\000\020\005\043\010\053\025" +
    "\046\037\045\041\044\043\052\044\051\001\002\000\004" +
    "\041\123\001\002\000\030\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\011\uffdb\013\uffdb\016\uffdb\020\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\001\002\000\012\026\004\027\020\030\014\043" +
    "\012\001\002\000\030\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\011\uffd9\013\uffd9\016\uffd9\020\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\001\002\000\004\020\116\001\002\000\022\004\071" +
    "\005\072\006\074\007\073\020\115\022\067\023\066\024" +
    "\070\001\002\000\030\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\011\uffd8\013\uffd8\016\uffd8\020\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\001\002\000\036\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\111\011\uffd5\012\uffd5\013\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\001\002\000\016\005\043" +
    "\010\053\025\046\041\044\043\052\044\051\001\002\000" +
    "\034\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\055" +
    "\013\uffe8\016\uffe8\017\056\020\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\001\002\000\016\005\043\010\053\025\046\041\044" +
    "\043\052\044\051\001\002\000\004\043\057\001\002\000" +
    "\036\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\060\011\uffd4" +
    "\012\uffd4\013\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\001\002\000\020\005\043\010\053\011\062" +
    "\025\046\041\044\043\052\044\051\001\002\000\024\004" +
    "\071\005\072\006\074\007\073\011\uffd7\016\065\022\067" +
    "\023\066\024\070\001\002\000\030\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\011\uffde\013\uffde\016\uffde\020\uffde\022\uffde" +
    "\023\uffde\024\uffde\001\002\000\004\011\064\001\002\000" +
    "\030\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\013\uffdc" +
    "\016\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\001\002\000" +
    "\016\005\043\010\053\025\046\041\044\043\052\044\051" +
    "\001\002\000\016\005\043\010\053\025\046\041\044\043" +
    "\052\044\051\001\002\000\016\005\043\010\053\025\046" +
    "\041\044\043\052\044\051\001\002\000\016\005\043\010" +
    "\053\025\046\041\044\043\052\044\051\001\002\000\016" +
    "\005\043\010\053\025\046\041\044\043\052\044\051\001" +
    "\002\000\016\005\043\010\053\025\046\041\044\043\052" +
    "\044\051\001\002\000\016\005\043\010\053\025\046\041" +
    "\044\043\052\044\051\001\002\000\016\005\043\010\053" +
    "\025\046\041\044\043\052\044\051\001\002\000\030\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\013\uffe4\016\uffe4" +
    "\020\uffe4\022\uffe4\023\uffe4\024\uffe4\001\002\000\030\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\013\uffe3\016\uffe3" +
    "\020\uffe3\022\uffe3\023\uffe3\024\uffe3\001\002\000\030\004" +
    "\uffe5\005\uffe5\006\074\007\073\011\uffe5\013\uffe5\016\uffe5" +
    "\020\uffe5\022\uffe5\023\uffe5\024\uffe5\001\002\000\030\004" +
    "\uffe6\005\uffe6\006\074\007\073\011\uffe6\013\uffe6\016\uffe6" +
    "\020\uffe6\022\uffe6\023\uffe6\024\uffe6\001\002\000\030\004" +
    "\071\005\072\006\074\007\073\011\uffe0\013\uffe0\016\uffe0" +
    "\020\uffe0\022\uffe0\023\uffe0\024\uffe0\001\002\000\030\004" +
    "\071\005\072\006\074\007\073\011\uffe2\013\uffe2\016\uffe2" +
    "\020\uffe2\022\uffe2\023\066\024\070\001\002\000\030\004" +
    "\071\005\072\006\074\007\073\011\uffe1\013\uffe1\016\uffe1" +
    "\020\uffe1\022\uffe1\023\uffe1\024\uffe1\001\002\000\004\011" +
    "\uffd6\001\002\000\022\004\071\005\072\006\074\007\073" +
    "\013\106\022\067\023\066\024\070\001\002\000\036\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\001\002\000\022\004\071\005\072\006\074\007\073" +
    "\011\110\022\067\023\066\024\070\001\002\000\030\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\013\uffe7\016\uffe7" +
    "\020\uffe7\022\uffe7\023\uffe7\024\uffe7\001\002\000\020\005" +
    "\043\010\053\011\112\025\046\041\044\043\052\044\051" +
    "\001\002\000\030\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011" +
    "\uffdf\013\uffdf\016\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\001\002\000\004\011\114\001\002\000\030\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\011\uffdd\013\uffdd\016\uffdd\020\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\001\002\000\030\002\ufff2\015" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\043\ufff2\001\002\000\030\002\ufff1\015" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\043\ufff1\001\002\000\006\012\120\020" +
    "\uffc4\001\002\000\016\005\043\010\053\025\046\041\044" +
    "\043\052\044\051\001\002\000\022\004\071\005\072\006" +
    "\074\007\073\013\122\022\067\023\066\024\070\001\002" +
    "\000\004\020\uffc5\001\002\000\030\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\011\uffda\013\uffda\016\uffda\020\uffda\022\uffda" +
    "\023\uffda\024\uffda\001\002\000\004\014\212\001\002\000" +
    "\004\043\207\001\002\000\004\011\127\001\002\000\004" +
    "\014\130\001\002\000\020\026\004\027\020\030\014\034" +
    "\140\035\131\036\135\043\136\001\002\000\004\010\201" +
    "\001\002\000\022\015\uffc6\026\004\027\020\030\014\034" +
    "\140\035\131\036\135\043\136\001\002\000\022\015\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\034\uffd2\035\uffd2\036\uffd2\043" +
    "\uffd2\001\002\000\004\015\177\001\002\000\004\010\171" +
    "\001\002\000\014\010\163\012\uffd5\017\uffd5\021\uffd5\043" +
    "\ufff5\001\002\000\004\043\162\001\002\000\020\005\043" +
    "\010\053\020\160\025\046\041\044\043\052\044\051\001" +
    "\002\000\010\012\055\017\142\021\143\001\002\000\004" +
    "\043\150\001\002\000\020\005\043\010\053\025\046\037" +
    "\045\041\044\043\052\044\051\001\002\000\004\020\147" +
    "\001\002\000\022\004\071\005\072\006\074\007\073\020" +
    "\146\022\067\023\066\024\070\001\002\000\022\015\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\034\uffd1\035\uffd1\036\uffd1\043" +
    "\uffd1\001\002\000\022\015\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\043\uffd0\001\002\000\012\010" +
    "\151\012\uffd4\017\uffd4\021\uffd4\001\002\000\020\005\043" +
    "\010\053\011\152\025\046\041\044\043\052\044\051\001" +
    "\002\000\004\020\156\001\002\000\004\011\154\001\002" +
    "\000\004\020\155\001\002\000\022\015\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\034\uffc8\035\uffc8\036\uffc8\043\uffc8\001\002" +
    "\000\022\015\uffc9\026\uffc9\027\uffc9\030\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\043\uffc9\001\002\000\022\004\071\005\072" +
    "\006\074\007\073\020\161\022\067\023\066\024\070\001" +
    "\002\000\022\015\uffce\026\uffce\027\uffce\030\uffce\034\uffce" +
    "\035\uffce\036\uffce\043\uffce\001\002\000\022\015\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\034\uffcf\035\uffcf\036\uffcf\043\uffcf" +
    "\001\002\000\006\020\040\021\042\001\002\000\020\005" +
    "\043\010\053\011\164\025\046\041\044\043\052\044\051" +
    "\001\002\000\004\020\170\001\002\000\004\011\166\001" +
    "\002\000\004\020\167\001\002\000\022\015\uffca\026\uffca" +
    "\027\uffca\030\uffca\034\uffca\035\uffca\036\uffca\043\uffca\001" +
    "\002\000\022\015\uffcb\026\uffcb\027\uffcb\030\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\043\uffcb\001\002\000\016\005\043\010" +
    "\053\025\046\041\044\043\052\044\051\001\002\000\022" +
    "\004\071\005\072\006\074\007\073\011\173\022\067\023" +
    "\066\024\070\001\002\000\004\014\174\001\002\000\020" +
    "\026\004\027\020\030\014\034\140\035\131\036\135\043" +
    "\136\001\002\000\004\015\176\001\002\000\022\015\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\034\uffcd\035\uffcd\036\uffcd\043" +
    "\uffcd\001\002\000\022\002\uffef\015\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\043\uffef\001\002\000\004\015" +
    "\uffc7\001\002\000\016\005\043\010\053\025\046\041\044" +
    "\043\052\044\051\001\002\000\022\004\071\005\072\006" +
    "\074\007\073\011\203\022\067\023\066\024\070\001\002" +
    "\000\004\014\204\001\002\000\020\026\004\027\020\030" +
    "\014\034\140\035\131\036\135\043\136\001\002\000\004" +
    "\015\206\001\002\000\022\015\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\043\uffcc\001\002\000\006" +
    "\011\uffed\016\210\001\002\000\012\026\004\027\020\030" +
    "\014\043\012\001\002\000\004\011\uffee\001\002\000\020" +
    "\026\004\027\020\030\014\034\140\035\131\036\135\043" +
    "\136\001\002\000\004\015\214\001\002\000\022\002\ufff0" +
    "\015\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\043" +
    "\ufff0\001\002\000\004\002\001\001\002\000\004\002\000" +
    "\001\002\000\004\022\220\001\002\000\012\026\004\027" +
    "\020\030\014\043\012\001\002\000\004\012\222\001\002" +
    "\000\004\013\223\001\002\000\004\020\224\001\002\000" +
    "\020\002\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\043\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\020\002\010\003\006\005\012\006\014\007" +
    "\007\010\004\011\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\215\003\006\005" +
    "\012\006\014\007\007\010\004\011\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\012\007\030\010\026" +
    "\020\031\021\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\012\007\030\010\026\020\031\021\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\012\007\030\010\026\020\031\021\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\124\023\125\001\001\000\010\012\047\014" +
    "\053\017\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\106\014\053\001\001\000\002\001\001\000" +
    "\006\012\104\014\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\060\013\062\014\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\060\013\103\014\053\001\001\000" +
    "\006\012\102\014\053\001\001\000\006\012\101\014\053" +
    "\001\001\000\006\012\100\014\053\001\001\000\006\012" +
    "\077\014\053\001\001\000\006\012\076\014\053\001\001" +
    "\000\006\012\075\014\053\001\001\000\006\012\074\014" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\060\013\112\014\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\120\014\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\136\007\132\014\140\015" +
    "\131\016\133\001\001\000\002\001\001\000\014\005\136" +
    "\007\132\014\140\015\131\016\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\156\014\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\144\014\053" +
    "\017\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\060\013\152\014\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\060\013\164\014\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\171" +
    "\014\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\136\007\132\014\140\015\131\016\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\201\014\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\136\007\132\014" +
    "\140\015\131\016\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\124\023\210\001" +
    "\001\000\002\001\001\000\014\005\136\007\132\014\140" +
    "\015\131\016\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s;
    lineNum = lexer.getLine();
    s = lexer.next_token();
    if (s.sym == TokenNames.ERROR)
    {
        System.out.print("LEXICAL ERROR >> [" + lexer.getLine() + ":" + (lexer.getTokenStartPosition()-1) + "]");
        file_writer.print(String.format("ERROR"));
        file_writer.close();
    }
    System.out.print("[" + lexer.getLine() + ":" +  (lexer.getTokenStartPosition()-1) + "]");
    System.out.print(TokenNames.terminalNames[s.sym]);
    if (s.value != null)
    {
        System.out.print("( "+s.value+" )");
    }
    System.out.print("\n");
    return s;

    }


    public Lexer lexer;
    public int lineNum =0 ;
    public PrintWriter file_writer;
    
    public Parser(Lexer lexer,PrintWriter file_writer){
        super(lexer);
        this.lexer = lexer;
        this.file_writer=file_writer;
    }
    public void report_error(String message, Object info)
    {
        file_writer.print(String.format("ERROR(%d)\n", lexer.getLine()));
        file_writer.close();
        System.out.print("ERROR >> [" + lexer.getLine() + ":" +  (lexer.getTokenStartPosition()-1) + "]");
    }
    private String escapeDotLabel(String label) {
        return label.replace("\"","\\\"").replace("\n","\\n");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_PROGRAM start_val = (AST_PROGRAM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= dec program 
            {
              AST_PROGRAM RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_DEC d = (AST_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_PROGRAM p = (AST_PROGRAM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_PROGRAM(d, p);  RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= dec 
            {
              AST_PROGRAM RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_DEC d = (AST_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_PROGRAM(d, null);  RESULT.setCurrentLine(lineNum) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declist ::= dec declist 
            {
              AST_DEC_LIST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_DEC h = (AST_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_DEC_LIST t = (AST_DEC_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_DEC_LIST(h, t); RESULT.setCurrentLine(lineNum);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declist ::= dec 
            {
              AST_DEC_LIST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_DEC d = (AST_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_DEC_LIST(d, null);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= varDec 
            {
              AST_DEC RESULT =null;
		int varDecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VAR_DEC varDec = (AST_VAR_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = varDec;RESULT.setCurrentLine(lineNum);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= funcDec 
            {
              AST_DEC RESULT =null;
		int funcDecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcDecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_FUNC_DEC funcDec = (AST_FUNC_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funcDec; RESULT.setCurrentLine(lineNum);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= classDec 
            {
              AST_DEC RESULT =null;
		int classDecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classDecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_CLASS_DEC classDec = (AST_CLASS_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = classDec; RESULT.setCurrentLine(lineNum);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec ::= arrayTypedef 
            {
              AST_DEC RESULT =null;
		int arrayTypedefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayTypedefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_ARRAY_TYPEDEF arrayTypedef = (AST_ARRAY_TYPEDEF)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =arrayTypedef;RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= TYPE_INT 
            {
              AST_TYPE RESULT =null;
		 RESULT = new AST_TYPE("TYPE_INT", false);RESULT.setCurrentLine(lineNum);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= TYPE_STRING 
            {
              AST_TYPE RESULT =null;
		 RESULT = new AST_TYPE("TYPE_STRING", false); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= TYPE_VOID 
            {
              AST_TYPE RESULT =null;
		 RESULT = new AST_TYPE("TYPE_VOID", false);  RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= ID 
            {
              AST_TYPE RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_TYPE(id, true);           RESULT.setCurrentLine(lineNum);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arrayTypedef ::= ARRAY ID EQ type LBRACK RBRACK SEMICOLON 
            {
              AST_ARRAY_TYPEDEF RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_TYPE type = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new AST_ARRAY_TYPEDEF(type, id);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayTypedef",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varDec ::= type ID SEMICOLON 
            {
              AST_VAR_DEC RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_TYPE type = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_VAR_DEC_EXP(type, id, null); RESULT.setCurrentLine(lineNum);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varDec ::= type ID ASSIGN exp SEMICOLON 
            {
              AST_VAR_DEC RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_TYPE type = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP exp = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_VAR_DEC_EXP(type, id, exp); RESULT.setCurrentLine(lineNum);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varDec ::= type ID ASSIGN newExp SEMICOLON 
            {
              AST_VAR_DEC RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_TYPE type = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int newExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_NEW_EXP newExp = (AST_NEW_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_VAR_DEC_NEW(type, id, newExp);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDec ::= type ID LPAREN RPAREN LBRACE stmtList RBRACE 
            {
              AST_FUNC_DEC RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST sList = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_FUNC_DEC(t, id, null, sList);RESULT.setCurrentLine(lineNum);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcDec ::= type ID LPAREN typeIdList RPAREN LBRACE stmtList RBRACE 
            {
              AST_FUNC_DEC RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tiListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tiListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_ID_LIST tiList = (AST_ID_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST sList = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_FUNC_DEC(t, id, tiList, sList);RESULT.setCurrentLine(lineNum);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // typeIdList ::= type ID COMMA typeIdList 
            {
              AST_ID_LIST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_ID_LIST list = (AST_ID_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_ID_LIST(t, id, list); RESULT.setCurrentLine(lineNum);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeIdList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // typeIdList ::= type ID 
            {
              AST_ID_LIST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_ID_LIST(t, id, null); RESULT.setCurrentLine(lineNum);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeIdList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // classDec ::= CLASS line LBRACE cFieldList RBRACE 
            {
              AST_CLASS_DEC RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_IDLINE l = (AST_IDLINE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_CFIELD_LIST list = (AST_CFIELD_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_CLASS_DEC(l.id, null, list,l.lineNum); RESULT.setCurrentLine(lineNum);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classDec ::= CLASS line EXTENDS ID LBRACE cFieldList RBRACE 
            {
              AST_CLASS_DEC RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AST_IDLINE l = (AST_IDLINE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int superidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int superidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String superid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_CFIELD_LIST list = (AST_CFIELD_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_CLASS_DEC(l.id, superid, list,l.lineNum);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cFieldList ::= cField cFieldList 
            {
              AST_CFIELD_LIST RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_CFIELD cf = (AST_CFIELD)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_CFIELD_LIST l = (AST_CFIELD_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_CFIELD_LIST(cf, l);  RESULT.setCurrentLine(lineNum);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cFieldList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cFieldList ::= cField 
            {
              AST_CFIELD_LIST RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_CFIELD cf = (AST_CFIELD)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_CFIELD_LIST(cf, null);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cFieldList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= var 
            {
              AST_EXP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_VAR(v);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= LPAREN exp RPAREN 
            {
              AST_EXP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_EXP_NODE(e);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp PLUS exp 
            {
              AST_EXP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e2 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_BINOP(e1, "plus", e2); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp MINUS exp 
            {
              AST_EXP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e2 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_BINOP(e1, "minus", e2);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp TIMES exp 
            {
              AST_EXP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e2 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_BINOP(e1, "times", e2);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp DIVIDE exp 
            {
              AST_EXP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e2 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_BINOP(e1, "divide", e2);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp EQ exp 
            {
              AST_EXP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e2 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_BINOP(e1, "eq", e2);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp LT exp 
            {
              AST_EXP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e2 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_BINOP(e1, "lt", e2);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp GT exp 
            {
              AST_EXP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e2 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_BINOP(e1, "gt", e2);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= ID LPAREN RPAREN 
            {
              AST_EXP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AST_EXP_ID(null, id, null); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= var DOT ID LPAREN RPAREN 
            {
              AST_EXP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AST_EXP_ID(v, id, null);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= ID LPAREN expList RPAREN 
            {
              AST_EXP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP_LIST elist = (AST_EXP_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_EXP_ID(null, id, elist); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= var DOT ID LPAREN expList RPAREN 
            {
              AST_EXP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP_LIST elist = (AST_EXP_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_EXP_ID(v, id, elist);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= INT 
            {
              AST_EXP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_INT(i);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= MINUS INT 
            {
              AST_EXP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_INT(-i); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= NIL 
            {
              AST_EXP RESULT =null;
		 RESULT = new AST_EXP_NIL();RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= STRING 
            {
              AST_EXP RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_STRING(escapeDotLabel(s)); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expList ::= exp 
            {
              AST_EXP_LIST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_LIST(e, null); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expList ::= exp COMMA expList 
            {
              AST_EXP_LIST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP_LIST l = (AST_EXP_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_LIST(e, l);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var ::= ID 
            {
              AST_VAR RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_VAR_SIMPLE(id);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var ::= var DOT ID 
            {
              AST_VAR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_VAR_FIELD(v, id);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var ::= var LBRACK exp RBRACK 
            {
              AST_VAR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_VAR_SUBSCRIPT(v, e);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= varDec 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VAR_DEC v = (AST_VAR_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_STMT_VAR_DEC(v); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= var ASSIGN exp SEMICOLON 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_ASSIGN(v, e); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= var ASSIGN newExp SEMICOLON 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_NEW_EXP e = (AST_NEW_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_ASSIGN_NEW(v, e);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= RETURN exp SEMICOLON 
            {
              AST_STMT RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_RETURN(e); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= RETURN SEMICOLON 
            {
              AST_STMT RESULT =null;
		 RESULT = new AST_STMT_RETURN(null);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= IF LPAREN exp RPAREN LBRACE stmtList RBRACE 
            {
              AST_STMT RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST sList = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_IF(e, sList);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= WHILE LPAREN exp RPAREN LBRACE stmtList RBRACE 
            {
              AST_STMT RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST sList = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_WHILE(e, sList);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= ID LPAREN RPAREN SEMICOLON 
            {
              AST_STMT RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new AST_STMT_FUNC(null, id, null); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= ID LPAREN expList RPAREN SEMICOLON 
            {
              AST_STMT RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP_LIST eList = (AST_EXP_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AST_STMT_FUNC(null, id, eList);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= var DOT ID LPAREN RPAREN SEMICOLON 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new AST_STMT_FUNC(v, id, null);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= var DOT ID LPAREN expList RPAREN SEMICOLON 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP_LIST eList = (AST_EXP_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AST_STMT_FUNC(v, id, eList);RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtList ::= stmt stmtList 
            {
              AST_STMT_LIST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT s = (AST_STMT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_STMT_LIST l = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_STMT_LIST(s,l); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtList ::= stmt 
            {
              AST_STMT_LIST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_STMT s = (AST_STMT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_STMT_LIST(s,null); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // newExp ::= NEW type LBRACK exp RBRACK 
            {
              AST_NEW_EXP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_NEW_EXP(t, e); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newExp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // newExp ::= NEW type 
            {
              AST_NEW_EXP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_NEW_EXP(t, null); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newExp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cField ::= varDec 
            {
              AST_CFIELD RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VAR_DEC v = (AST_VAR_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_CFIELD_VAR(v);RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cField",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cField ::= funcDec 
            {
              AST_CFIELD RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_FUNC_DEC f = (AST_FUNC_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_CFIELD_FUNC(f); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cField",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binop ::= PLUS 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP("plus"); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binop ::= MINUS 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP("minus"); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= TIMES 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP("times"); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= DIVIDE 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP("divide"); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= EQ 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP("eq");RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= LT 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP("lt"); RESULT.setCurrentLine(lineNum);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= GT 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP("gt");RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // line ::= ID 
            {
              AST_IDLINE RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_IDLINE(id); RESULT.setCurrentLine(lineNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
